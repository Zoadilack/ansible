---
- set_fact: symfony_root="/var/www/{{appname}}/api"
- set_fact: api_ssh_key="/home/{{become_user}}/.ssh/tavro_api_deployment_key"
- set_fact: api_ssh_key_pub="{{api_ssh_key}}.pub"

- set_fact:
    composer_args: "--no-interaction --prefer-dist --no-scripts --ignore-platform-reqs --no-suggest"
  when: tavro_env != 'production'

- set_fact:
    composer_args: "--no-interaction --prefer-dist --no-dev --no-suggest --classmap-authoritative"
  when: tavro_env == 'production'

- name: API | build api configuration for nginx
  template: src="api.conf.j2" dest="/etc/nginx/sites-available/api.conf" owner=www-data group=www-data mode=0644

- name: API | enable api virtual host
  file:
    src: "/etc/nginx/sites-available/api.conf"
    dest: "/etc/nginx/sites-enabled/api.conf"
    state: link

- name: API | clear the symfony app cache
  file:
    dest: "{{symfony_root}}/var/cache"
    state: absent
  become: true
  become_user: root

# Do not restrict this to only if the file does NOT exists,
# because we want to be able to override on demand with a new
# set of config files in the provisioning root.
- name: API | create parameters file for symfony app
  template:
    dest: "{{symfony_root}}/app/config/parameters.yml"
    src: parameters.yml.j2
    mode: 0644

- name: API | make sure the keys dir exists
  file: path="{{symfony_root}}/app/keys" state=directory mode=0777 force=yes
  become: true
  become_user: root

- name: API | generate private key for JWT authentication
  command: openssl genrsa -out private.pem -aes256 -passout pass:{{JWT_TOKEN_PASSPHRASE}} 4096
  args:
    chdir: "{{symfony_root}}/app/keys"

- name: API | generate public key for JWT authentication
  command: openssl rsa -passin pass:{{JWT_TOKEN_PASSPHRASE}} -pubout -in private.pem -out public.pem
  args:
    chdir: "{{web_root}}api/app/keys"

- name: API | clear composer cache
  composer:
    command: clear-cache
    working_dir: "{{symfony_root}}"

- name: API | composer install
  composer:
    command: install
    arguments: "{{composer_args}}"
    working_dir: "{{symfony_root}}"
  when: autoloader.stat.exists == False
  become: true
  become_user: "{{become_user}}"

- name: API | composer update
  composer:
    command: update
    arguments: "{{composer_args}}"
    working_dir: "{{symfony_root}}"
  when: autoloader.stat.exists == True
  become: true
  become_user: "{{become_user}}"