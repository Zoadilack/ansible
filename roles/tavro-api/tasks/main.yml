---
- set_fact: symfony_root="/var/www/{{appname}}/api"
- set_fact: api_ssh_key="/home/{{become_user}}/.ssh/tavro_api_deployment_key"
- set_fact: api_ssh_key_pub="{{api_ssh_key}}.pub"

- stat:
    path: "{{symfony_root}}/vendor/autoload.php"
  register: autoloader

- name: build api configuration for nginx
  template: src="api.conf.j2" dest="/etc/nginx/sites-available/api.conf" owner=www-data group=www-data mode=0644

- name: enable api virtual host
  file:
    src: "/etc/nginx/sites-available/api.conf"
    dest: "/etc/nginx/sites-enabled/api.conf"
    state: link

- name: clone public deployment key
  copy:
    src: "files/deployment_key.pub"
    dest: "{{api_ssh_key_pub}}"
    mode: 0400
    owner: "{{become_user}}"
    group: "{{become_user}}"

- name: clone deployment key
  copy:
    src: "files/deployment_key"
    dest: "{{api_ssh_key}}"
    mode: 0400
    owner: "{{become_user}}"
    group: "{{become_user}}"

- name: Set authorized key with deployment key
  shell: "ssh-add {{api_ssh_key}}"

- name: deploy tavro-api.git
  git:
    repo: git@bitbucket.org:zoadilack/tavro-api.git
    dest: "{{symfony_root}}"
    version: "{{tavro_version}}"
    accept_hostkey: yes
  tags:
    - staging
    - production

# Do not restrict this to only if the file does NOT exists,
# because we want to be able to override on demand with a new
# set of config files in the provisioning root.
- name: create parameters file for symfony app
  template:
    dest: "{{symfony_root}}/app/config/parameters.yml"
    src: parameters.yml.j2
    mode: 0644

- name: make sure the keys dir exists
  file: path="{{symfony_root}}/app/keys" state=directory mode=0777 force=yes
  become: true
  become_user: root

- name: generate private key for JWT authentication
  command: openssl genrsa -out private.pem -aes256 -passout pass:tavro 4096
  args:
    chdir: "{{symfony_root}}/app/keys"

- name: generate public key for JWT authentication
  command: openssl rsa -passin pass:tavro -pubout -in private.pem -out public.pem
  args:
    chdir: "{{web_root}}api/app/keys"

- name: composer install
  composer:
    command: install
    arguments: --prefer-dist
    working_dir: "{{symfony_root}}"
  when: autoloader.stat.exists == False
  become: true
  become_user: "{{become_user}}"

- name: composer update
  composer:
    command: update
    arguments: --prefer-dist
    working_dir: "{{symfony_root}}"
  when: autoloader.stat.exists == True
  become: true
  become_user: "{{become_user}}"